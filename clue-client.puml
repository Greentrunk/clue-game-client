@startuml
'https://plantuml.com/class-diagram

class Client {
    websocket_connection: WebsocketConnection
    set_websocket(websocket: Websocket)
    json_serialize(): String
    async send_gamestate_to_client()
    next_phase()
    next_player()
}

enum ClientType {
    Console = 0
    Pygame = 1
}

Client -- "0..*" GameScreens
Client "1" -- "0..*" ClientType
Client "1" -- "0..*" GameStateMessage
Client "1" -- "0..*" WebsocketConnection
Client "1" -- "0..*" UserInterface
UserInterface "1" --> "0" GameStateMessage
UserInterface "1" --> "0" Gameboard
UserInterface "1" --> "0" GameScreens
Console "1" --> "0" gameboardSquare

class main{
    main()
}

class GameStateMessage {
    <<get/set>> name: string
    <<get/set>> position: Point
    notes: string
    is_active: bool
    void add_cards(cards: List<Card>)
    void add_note(note: string)
    get_cards() : List<Card>
    _get_cards_string() : List<string>
    dict() : dict
}


class Pygame implements UserInterface {
    font
    start_screen: Pygame_screen
    clock
    draw()
    run()
    quit()
}

class Console implements UserInterface {
    draw()
}

class gameboardSquare {
    String name
    int rowCoordinate
    int colCoordinate
    gameboardSquare[] connections
    player[] playersInside
    weapon[] weaponsInside
    String asset Render
}

class Gameboard {
    start_screen String
    <<get>> weapon_map: dict<Weapon, Room>
    <<get>> player_map: List<List<None | Player>>
    move_weapon(weapon, new_room)
}


abstract class UserInterface {
   game_screen: GameScreens = START
   game_data_queue
   gameboard: Gameboard
   message: GameStateMessage
   screen: GameScreens
   ws
   is_running: Boolean
   set_game_data_queue(): game_data_queue
   {abstract}draw(screen, message, gameboard)
   update_gameboard(gameboard, message)
   player_name: String
   is_administrator: Boolean
   add_claim(claim: Claim)
   array_of_claim_dicts(): List<dict>
}

class WebsocketConnection {
    game_data_queue
    ws_ready_event
    websocket: Websocket
    host_url
    start_forever()
    on_open(websocket: Websocket)
    on_error(websocket: Websocket)
    on_close(websocket: Websocket, close_status_code, close_msg)
    on_message(websocket: Websocket)
    on_reconnect(websocket: Websocket)
    validate_user_message(message: String): boolean
    send_message(message: String)
}

enum GameScreens {
    <<START = "Start Screen">>
    <<CHARACTERSELECTION = "Character Selection Screen">>
    <<DEALCARDS = "Deal Cards Screen">>
    <<GAMEBOARD = "Gameboard Screen">>
    <<PLAYERTURN = "Player Turn Screen">>
    <<PLAYERWIN = "Player Win Screen">>
    <<PLAYERLOSS = "Player Loss Screen">>
    <<GAMEOVER = "Game Over Screen">>
}

@enduml